https://leetcode.com/problems/trapping-rain-water/description/

42. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

//////////////////////Solution///////////////////////////////////

var trap = function(arr) {
          // left[i] contains height of tallest bar to the 
        // left of i'th bar including itself 
        let n = arr.length;
        let left = new Array(n); 
   
        // Right [i] contains height of tallest bar to 
        // the right of ith bar including itself 
        let right = new Array(n); 
   
        // Initialize result 
        let water = 0; 
   
        // Fill left array 
        left[0] = arr[0]; 
        for (let i = 1; i < n; i++) 
            left[i] = Math.max(left[i - 1], arr[i]); 
   
        // Fill right array 
        right[n - 1] = arr[n - 1]; 
        for (let i = n - 2; i >= 0; i--) 
            right[i] = Math.max(right[i + 1], arr[i]); 
   
        // Calculate the accumulated water element by element 
        // consider the amount of water on i'th bar, the 
        // amount of water accumulated on this particular 
        // bar will be equal to min(left[i], right[i]) - arr[i] . 
        for (let i = 0; i < n; i++) 
            water += Math.min(left[i], right[i]) - arr[i]; 
   
        return water; 
};